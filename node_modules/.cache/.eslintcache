[{"/home/user/Desktop/project/iqoption/src/index.tsx":"1","/home/user/Desktop/project/iqoption/src/App.tsx":"2","/home/user/Desktop/project/iqoption/src/styles/global.ts":"3","/home/user/Desktop/project/iqoption/src/store/index.ts":"4","/home/user/Desktop/project/iqoption/src/routes/index.tsx":"5","/home/user/Desktop/project/iqoption/src/store/modules/rootReducer.ts":"6","/home/user/Desktop/project/iqoption/src/store/modules/iqoption/reducer.ts":"7","/home/user/Desktop/project/iqoption/src/pages/LoginIQ/index.tsx":"8","/home/user/Desktop/project/iqoption/src/pages/Main/index.tsx":"9","/home/user/Desktop/project/iqoption/src/store/modules/iqoption/types.ts":"10","/home/user/Desktop/project/iqoption/src/utils/storage.js":"11","/home/user/Desktop/project/iqoption/src/pages/LoginIQ/styled.ts":"12","/home/user/Desktop/project/iqoption/src/store/modules/iqoption/action.ts":"13","/home/user/Desktop/project/iqoption/src/pages/Main/styled.ts":"14","/home/user/Desktop/project/iqoption/src/utils/operate.ts":"15"},{"size":198,"mtime":1633641028600,"results":"16","hashOfConfig":"17"},{"size":651,"mtime":1633794701178,"results":"18","hashOfConfig":"17"},{"size":369,"mtime":1633642205648,"results":"19","hashOfConfig":"17"},{"size":451,"mtime":1633646082982,"results":"20","hashOfConfig":"17"},{"size":364,"mtime":1633789373191,"results":"21","hashOfConfig":"17"},{"size":135,"mtime":1633803217960,"results":"22","hashOfConfig":"17"},{"size":527,"mtime":1633703080942,"results":"23","hashOfConfig":"17"},{"size":2289,"mtime":1634140035693,"results":"24","hashOfConfig":"17"},{"size":10476,"mtime":1634140933319,"results":"25","hashOfConfig":"17"},{"size":97,"mtime":1633646281337,"results":"26","hashOfConfig":"17"},{"size":1566,"mtime":1634140982102,"results":"27","hashOfConfig":"17"},{"size":1061,"mtime":1633794690462,"results":"28","hashOfConfig":"17"},{"size":362,"mtime":1633703254453,"results":"29","hashOfConfig":"17"},{"size":2839,"mtime":1633781841047,"results":"30","hashOfConfig":"17"},{"size":2318,"mtime":1634140223897,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1k2awiy",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},"/home/user/Desktop/project/iqoption/src/index.tsx",[],["65","66"],"/home/user/Desktop/project/iqoption/src/App.tsx",[],"/home/user/Desktop/project/iqoption/src/styles/global.ts",[],"/home/user/Desktop/project/iqoption/src/store/index.ts",[],"/home/user/Desktop/project/iqoption/src/routes/index.tsx",[],"/home/user/Desktop/project/iqoption/src/store/modules/rootReducer.ts",[],"/home/user/Desktop/project/iqoption/src/store/modules/iqoption/reducer.ts",[],"/home/user/Desktop/project/iqoption/src/pages/LoginIQ/index.tsx",[],"/home/user/Desktop/project/iqoption/src/pages/Main/index.tsx",["67","68"],"import React from 'react';\n\nimport { RouteComponentProps } from 'react-router-dom';\nimport storage from '../../utils/storage';\n\nimport schedule from 'node-schedule';\n\nimport IQOption from 'iqoptionzzz';\nimport operate from '../../utils/operate'\n\nimport axios from 'axios';\n\nimport { toast } from 'react-toastify';\nimport { Div, DivChange, DivConfig, DivStarted, StartBot } from './styled';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nexport default function LoginIQ({ history }:{ history: RouteComponentProps['history'] }) {\n    const [ stopWin, setStopWin ] = React.useState(0);\n    const [ stopLoss, setStopLoss ] = React.useState(0);\n    const [ delay, setDelay ] = React.useState(0);\n    const [ file, setFile ] = React.useState<File>();\n    const [ balance, setBalance ] = React.useState<number | boolean>(false);\n    const [ buttonName, setButtonName ] = React.useState('Configurar');\n    const [ entrada, setEntrada ] = React.useState(0);\n    const [ martinGales, setMartinGales ] = React.useState(0);\n\n    const [ oldTrade, setOldTrade ] = React.useState({\n        time: '',\n        active: '',\n        direction: '',\n    });\n\n    const [ nextTrade, setNextTrade ] = React.useState({\n        time: '',\n        active: '',\n        direction: '',\n    });\n\n    const buttonStart = React.useRef<HTMLButtonElement>();\n\n    const div = React.useRef<HTMLDivElement>();\n    const divConfig = React.useRef<HTMLDivElement>();\n    const divChange = React.useRef<HTMLDivElement>();\n    const divStarted = React.useRef<HTMLDivElement>();\n\n    const martin = React.useRef<HTMLInputElement>();\n\n    const iqoption = useSelector((state: {\n        iqoption: {\n            email: string;\n            password: string;\n            ssid: string;\n        }\n    }) => state.iqoption);\n\n    const dispatch = useDispatch();\n    async function handleClick(e: React.ChangeEvent<any>): Promise<unknown> {\n        if(buttonStart.current.innerText === 'Stop') {\n            divStarted.current.style.display = 'none';\n            buttonStart.current.innerText = 'Start';\n            buttonStart.current.style.backgroundColor = 'green';\n            div.current.style.display = 'block';\n            divChange.current.style.display = 'block';\n\n            Object.keys(schedule.scheduledJobs).forEach((key) => {\n                schedule.scheduledJobs[key].cancel();\n            })\n\n            setOldTrade({\n                time: '',\n                active: '',\n                direction: '',\n            });\n\n            setNextTrade({\n                time: '',\n                active: '',\n                direction: '',\n            });\n            return;\n        }\n        \n        const errors: string[] = [];\n        if(!stopWin) errors.push('Preencha stopWin');\n        if(!stopLoss) errors.push('Preencha stopLoss');\n        if(!file) errors.push('Coloque uma lista');\n        if(!entrada) errors.push('Coloque uma entrada');\n\n        if(errors.length > 0) return errors.forEach((value) => {\n            toast.error(value);\n        });\n\n        if(buttonStart.current.innerText === 'Start') {\n            buttonStart.current.innerText = 'Stop';\n            buttonStart.current.style.backgroundColor = 'red';\n            div.current.style.display = 'none';\n            divConfig.current.style.display = 'none';\n            divChange.current.style.display = 'none';\n            divStarted.current.style.display = 'block';\n        } \n\n\n        const gales = [];\n        gales.push(Number(entrada));\n\n        for(let i = 0; martinGales > i; i++) {\n            gales.push(gales[gales.length - 1] * 2);\n        }\n\n        storage.setStopLoss(stopLoss);\n        storage.setStopWin(stopWin);\n        storage.setMartinGales(gales);\n        \n        const formData = new FormData();\n        formData.append('file', file);\n\n       try {\n           console.log(process.env.REACT_APP_PROTOCOL);\n           const { data }: { data: any } = await axios.post(`${process.env.REACT_APP_PROTOCOL}://${process.env.REACT_APP_HOST_APP}/api/v2/sinais`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n\n        });\n\n        if(data.length === 0) return toast.error('Por favor adicione pelo menos 2 trades a lista');\n\n        try {\n            const API = await toast.promise(IQOption({\n                email: iqoption.email,\n                password: iqoption.password\n            }), {\n                pending: 'Aguarde',\n                success: 'Bot inicializado, nao feche o navegador',\n                error: 'Erro ao iniciar o bot'\n            });\n            console.log('IQOPTION CONNECTED');\n\n            setNextTrade({\n                active: data[0].active,\n                direction: data[0].direction,\n                time: `${data[0].time.hour}:${data[0].time.minutes}`\n            });\n\n            data.forEach((value, index, array) => {\n                let minutes = delay ? String(value.time.minutes - 1) : String(value.time.minutes);\n            \n                let obj = delay !== 0 ? { hour: value.time.hour, minute: minutes, second: String(60 - delay - 1) } : { hour: value.time.hour, minute: minutes };\n\n                schedule.scheduleJob(obj, () => {\n                    try {\n                        let indexOld = index - 1;\n                if(index === 0) indexOld = 0;\n\n                let indexNew = index + 1;\n                if(array.length - 1 === index) indexNew = index;\n\n                setOldTrade({\n                    active: array[indexOld].active,\n                    direction: array[indexOld].direction,\n                    time: `${array[indexOld].time.hour}:${array[indexOld].time.minutes}`\n                });\n\n                setNextTrade({\n                    active: array[indexNew].active,\n                    direction: array[indexNew].direction,\n                    time: `${array[indexNew].time.hour}:${array[indexNew].time.minutes}`\n                });\n                \n                    operate(API, value.active, value.direction, Number(value.duration));\n                    } catch(e) {\n                        //\n                    }\n                });\n            });\n        } catch(e) {\n            console.log(e);\n            toast.error('Verifique as configuracoes');\n            div.current.style.display = 'block';\n            divStarted.current.style.display = 'none';\n            buttonStart.current.innerText = 'Start';\n            buttonStart.current.style.backgroundColor = 'green';\n        }\n       } catch(e) {\n           toast.error('Arquivo invalido');\n       }\n\n       \n\n    }\n\n    React.useEffect(() => {\n         async function getBalance() {\n             if(balance) return;\n            const ws = new WebSocket('wss://iqoption.com/echo/websocket');\n\n           ws.onopen = () => {\n               console.log('Started');\n               ws.send(JSON.stringify({\"name\":\"ssid\",\"msg\": iqoption.ssid}));\n            }\n\n            ws.onmessage = (message) => {\n                const myMessage = JSON.parse(message.data) as {\n                    name: string;\n                    msg: {\n                        balances: {\n                            amount: number;\n                        }[];\n                    }\n                };\n                \n                if(myMessage.name === 'profile') {\n                    setBalance(myMessage.msg.balances[1]?.amount)\n                    ws.close();\n                }\n            }\n        }\n\n        getBalance();\n    });\n    return(\n        <>\n        <DivStarted ref={divStarted}>\n            <p>Anterior</p>\n            <button><p>{ oldTrade.time } { oldTrade.active } { oldTrade.direction }</p></button>\n\n            <p>Proximo</p>\n            <button><p>{ nextTrade.time } { nextTrade.active } { nextTrade.direction }</p></button>\n        </DivStarted>\n        <DivChange ref={divChange}>\n            <button onClick={(e: any) => {\n                if(div.current.style.display === 'none') {\n                    div.current.style.display = 'block';\n                    divConfig.current.style.display = 'none';\n                    setButtonName('Configurar');\n                    return;\n                }\n                \n                div.current.style.display = 'none';\n                divConfig.current.style.display = 'block';\n                \n                setButtonName('Iniciar');\n            }}>{ buttonName }</button>\n        </DivChange>\n        <DivConfig ref={divConfig}>\n            <h1>Banca <span>{ balance ? `$${balance}` : 'Loading...' }</span></h1>\n            <h1>Delay <span><input type=\"number\" onChange={(e) => {\n                const value = e.target.value as unknown as number;\n                if(!value) return;\n                setDelay(value);\n            }}/></span></h1>\n            <h1>Stop Win <span><input type=\"number\" onChange={(e) => {\n                const value = e.target.value as unknown as number;\n                if(!value) return;\n                setStopWin(value);\n            }}/></span></h1>\n            <h1>Stop Loss <span><input type=\"number\" onChange={(e) => {\n                const value = e.target.value as unknown as number;\n                if(!value) return;\n                setStopLoss(value);\n            }}/></span></h1>\n             <h1>Entrada <span><input type=\"number\" onChange={(e) => {\n                const value = e.target.value as unknown as number;\n                if(!value) return;\n                setEntrada(value);\n            }}/></span></h1>\n            <h1>MartinGales <span><input type=\"number\" onChange={(e) => {\n                const value = e.target.value as unknown as number;\n                if(!value) return;\n                setMartinGales(value);\n            }}/></span></h1>\n            <h1>Listas <span><input type=\"file\" accept=\"text/plain\" onChange={(e) => {\n                const file = e.target.files[0];\n                setFile(file);\n            }} /></span></h1>\n        </DivConfig>\n\n        <Div ref={div}>\n            <h1>Banca <span>{ balance ? `$${balance}` : 'Loading...' }</span></h1>\n            <h1>Delay <span>{ delay }</span></h1>\n            <h1>Stop Win <span>{ stopWin }</span></h1>\n            <h1>Stop Loss <span>{ stopLoss }</span></h1>\n            <h1>Entrada <span>{ entrada }</span></h1>\n            <h1>MartinGales <span>{ martinGales }</span></h1>\n        </Div>\n\n        <StartBot>\n            <button ref={buttonStart} onClick={handleClick}>Start</button>\n        </StartBot>\n        </>\n    );\n}\n","/home/user/Desktop/project/iqoption/src/store/modules/iqoption/types.ts",[],"/home/user/Desktop/project/iqoption/src/utils/storage.js",[],"/home/user/Desktop/project/iqoption/src/pages/LoginIQ/styled.ts",[],"/home/user/Desktop/project/iqoption/src/store/modules/iqoption/action.ts",[],"/home/user/Desktop/project/iqoption/src/pages/Main/styled.ts",[],"/home/user/Desktop/project/iqoption/src/utils/operate.ts",["69","70","71"],"import storage from './storage';\n\nconst type = \"BINARY\" // BINARY OR DIGITAL\n\nlet finishedGale = false;\nlet winned = false;\nlet forcedStopMartinGale = false;\n\nexport default async function operate(API, active, action, duration) {\t\n\t\tconst martinGales = storage.getStorage().martinGales;\n\t\tconsole.log(\"===============================\")\n\n\t\tconsole.log(`ULTIMAS VELAS: ${action}`)\n\t\tconsole.log(`DIREÇAO: ${action}`)\n\t\tconst winsValue = storage.getStorage().winsValue;\n\t\tconst lossValue = storage.getStorage().losssValue;\n\t\tconst stopGain = storage.getStorage().stopGain;\n\t\tconst stopLoss = storage.getStorage().stopLoss;\n\n\t\tforcedStopMartinGale = false;\n\t\tasync function tradeAgain() {\n\t\t\tfor (let martinGale of martinGales) {\t\n\n\t\t\t\tif(Number(martinGale) + lossValue >= stopLoss) {\n\t\t\t\t\tforcedStopMartinGale = true;\n\t\t\t\t\tstorage.stopLossStoped();\n\t\t\t\t\treturn;\n\t\t\t\t};\n\n\t\t\t\tif(winsValue >= stopGain) {\n\t\t\t\t\tforcedStopMartinGale = true;\n\t\t\t\t\tstorage.stopGain();\n\t\t\t\t\treturn;\n\t\t\t\t};\n\n\t\t\t\tconst martinGaleNumber = martinGales.indexOf(martinGale)\n\t\t\t\tconst isMartinGale = martinGale == martinGales[0]\n\t\t\t\tmartinGale = martinGale.toFixed(2) as any\n\n\t\t\t\tconsole.log(isMartinGale ? `ENTRADA: R$ ${martinGale}` : `MG${martinGaleNumber}: R$ ${martinGale}`)\n\t\t\t\tconst order = await API.buy({\n\t\t\t\t\tactive,\n\t\t\t\t\taction: action,\n\t\t\t\t\tamount: martinGale,\n\t\t\t\t\ttype,\n\t\t\t\t\tduration: duration //1 e 1 minutos\n\t\t\t\t})\n\t\t\t\tawait order.close()\n\n\t\t\t\tif(!order.quote.win) {\n\t\t\t\t\tstorage.addLossValue(Number(martinGale));\n\t\t\t\t\tif(lossValue >= stopLoss) {\n\t\t\t\t\t\tstorage.stopLossStoped();\n\t\t\t\t\t\tforcedStopMartinGale = true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif(order.quote.win) {\n\t\t\t\t\tstorage.addWinValue(Number(martinGale));\n\t\t\t\t\tif(winsValue >= stopGain) {\n\t\t\t\t\t\tstorage.stopGain();\n\t\t\t\t\t\tforcedStopMartinGale = true;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\n\t\t\t\tconsole.log(\"\\nWins\", ' ',storage.getStorage().winCount, ' ', 'Losss', ' ', storage.getStorage().lossCount);\n\n\t\t\t\tconst result = order.quote.win ? \"WIN\" : \"LOSS\"\n\t\t\t\tconsole.log(\"Resultado: \", result);\n\n\t\t\t\tif (martinGale == martinGales[martinGales.length - 1].toFixed(2) as any) {\n\t\t\t\t\tfinishedGale = true;\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif (result == 'WIN') {\n\t\t\t\t\twinned = true;\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t}\n\t\twhile((!finishedGale && !winned) && !forcedStopMartinGale) await tradeAgain();\n\n\t\tfinishedGale = false;\n\t\twinned = false;\n}",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":48,"column":11,"nodeType":"78","messageId":"79","endLine":48,"endColumn":17},{"ruleId":"76","severity":1,"message":"80","line":58,"column":11,"nodeType":"78","messageId":"79","endLine":58,"endColumn":19},{"ruleId":"81","severity":1,"message":"82","line":37,"column":37,"nodeType":"83","messageId":"84","endLine":37,"endColumn":39},{"ruleId":"81","severity":1,"message":"82","line":71,"column":20,"nodeType":"83","messageId":"84","endLine":71,"endColumn":22},{"ruleId":"81","severity":1,"message":"82","line":75,"column":16,"nodeType":"83","messageId":"84","endLine":75,"endColumn":18},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"@typescript-eslint/no-unused-vars","'martin' is assigned a value but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]