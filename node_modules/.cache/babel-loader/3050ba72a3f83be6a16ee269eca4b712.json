{"ast":null,"code":"import storage from './storage';\nconst type = \"BINARY\"; // BINARY OR DIGITAL\n\nlet finishedGale = false;\nlet winned = false;\nlet forcedStopMartinGale = false;\nexport default async function operate(API, active, action, duration) {\n  const martinGales = storage.getStorage().martinGales;\n  console.log(\"===============================\");\n  console.log(`ULTIMAS VELAS: ${action}`);\n  console.log(`DIREÇAO: ${action}`);\n  const winsValue = storage.getStorage().winsValue;\n  const lossValue = storage.getStorage().losssValue;\n  const stopGain = storage.getStorage().stopGain;\n  const stopLoss = storage.getStorage().stopLoss;\n  forcedStopMartinGale = false;\n\n  async function tradeAgain() {\n    for (let martinGale of martinGales) {\n      if (Number(martinGale) + lossValue >= stopLoss) {\n        forcedStopMartinGale = true;\n        storage.stopLossStoped();\n        return;\n      }\n\n      ;\n\n      if (winsValue >= stopGain) {\n        forcedStopMartinGale = true;\n        storage.stopGain();\n        return;\n      }\n\n      ;\n      const martinGaleNumber = martinGales.indexOf(martinGale);\n      const isMartinGale = martinGale == martinGales[0];\n      martinGale = martinGale.toFixed(2);\n      console.log(isMartinGale ? `ENTRADA: R$ ${martinGale}` : `MG${martinGaleNumber}: R$ ${martinGale}`);\n      const order = await API.buy({\n        active,\n        action: action,\n        amount: martinGale,\n        type,\n        duration: duration //1 e 1 minutos\n\n      });\n      await order.close(); //console.log(await API.getBalance('PRACTICE').amount);\n\n      console.log('ordem', order.quote.win);\n\n      if (!order.quote.win) {\n        storage.addLossValue(Number(martinGale));\n\n        if (lossValue >= stopLoss) {\n          storage.stopLossStoped();\n          forcedStopMartinGale = true;\n        }\n      }\n\n      ;\n\n      if (order.quote.win) {\n        storage.addWinValue(Number(martinGale));\n\n        if (winsValue >= stopGain) {\n          storage.stopGain();\n          forcedStopMartinGale = true;\n        }\n      }\n\n      ;\n      console.log(\"\\nWins\", ' ', storage.getStorage().winCount, ' ', 'Losss', ' ', storage.getStorage().lossCount);\n      const result = order.quote.win ? \"WIN\" : \"LOSS\";\n      console.log(\"Resultado: \", result);\n\n      if (martinGale == martinGales[martinGales.length - 1].toFixed(2)) {\n        finishedGale = true;\n        break;\n      }\n\n      if (result == 'WIN') {\n        winned = true;\n        break;\n      }\n    }\n  }\n\n  while (!finishedGale && !winned && !forcedStopMartinGale) await tradeAgain();\n\n  finishedGale = false;\n  winned = false;\n}","map":{"version":3,"sources":["/home/user/Desktop/project/iqoption/src/utils/operate.ts"],"names":["storage","type","finishedGale","winned","forcedStopMartinGale","operate","API","active","action","duration","martinGales","getStorage","console","log","winsValue","lossValue","losssValue","stopGain","stopLoss","tradeAgain","martinGale","Number","stopLossStoped","martinGaleNumber","indexOf","isMartinGale","toFixed","order","buy","amount","close","quote","win","addLossValue","addWinValue","winCount","lossCount","result","length"],"mappings":"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","sourcesContent":["import storage from './storage';\n\nconst type = \"BINARY\" // BINARY OR DIGITAL\n\nlet finishedGale = false;\nlet winned = false;\nlet forcedStopMartinGale = false;\n\nexport default async function operate(API, active, action, duration) {\t\n\tconst martinGales = storage.getStorage().martinGales;\n\t\tconsole.log(\"===============================\")\n\n\t\tconsole.log(`ULTIMAS VELAS: ${action}`)\n\t\tconsole.log(`DIREÇAO: ${action}`)\n\t\tconst winsValue = storage.getStorage().winsValue;\n\t\tconst lossValue = storage.getStorage().losssValue;\n\t\tconst stopGain = storage.getStorage().stopGain;\n\t\tconst stopLoss = storage.getStorage().stopLoss;\n\n\t\tforcedStopMartinGale = false;\n\t\tasync function tradeAgain() {\n\t\t\tfor (let martinGale of martinGales) {\t\n\n\t\t\t\tif(Number(martinGale) + lossValue >= stopLoss) {\n\t\t\t\t\tforcedStopMartinGale = true;\n\t\t\t\t\tstorage.stopLossStoped();\n\t\t\t\t\treturn;\n\t\t\t\t};\n\n\t\t\t\tif(winsValue >= stopGain) {\n\t\t\t\t\tforcedStopMartinGale = true;\n\t\t\t\t\tstorage.stopGain();\n\t\t\t\t\treturn;\n\t\t\t\t};\n\n\t\t\t\tconst martinGaleNumber = martinGales.indexOf(martinGale)\n\t\t\t\tconst isMartinGale = martinGale == martinGales[0]\n\t\t\t\tmartinGale = martinGale.toFixed(2) as any\n\n\t\t\t\tconsole.log(isMartinGale ? `ENTRADA: R$ ${martinGale}` : `MG${martinGaleNumber}: R$ ${martinGale}`)\n\t\t\t\tconst order = await API.buy({\n\t\t\t\t\tactive,\n\t\t\t\t\taction: action,\n\t\t\t\t\tamount: martinGale,\n\t\t\t\t\ttype,\n\t\t\t\t\tduration: duration //1 e 1 minutos\n\t\t\t\t})\n\t\t\t\tawait order.close()\n\t\t\t\t//console.log(await API.getBalance('PRACTICE').amount);\n\t\t\t\tconsole.log('ordem', order.quote.win);\n\n\n\t\t\t\tif(!order.quote.win) {\n\t\t\t\t\tstorage.addLossValue(Number(martinGale));\n\t\t\t\t\tif(lossValue >= stopLoss) {\n\t\t\t\t\t\tstorage.stopLossStoped();\n\t\t\t\t\t\tforcedStopMartinGale = true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif(order.quote.win) {\n\t\t\t\t\tstorage.addWinValue(Number(martinGale));\n\t\t\t\t\tif(winsValue >= stopGain) {\n\t\t\t\t\t\tstorage.stopGain();\n\t\t\t\t\t\tforcedStopMartinGale = true;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\n\t\t\t\tconsole.log(\"\\nWins\", ' ',storage.getStorage().winCount, ' ', 'Losss', ' ', storage.getStorage().lossCount);\n\n\t\t\t\tconst result = order.quote.win ? \"WIN\" : \"LOSS\"\n\t\t\t\tconsole.log(\"Resultado: \", result);\n\n\t\t\t\tif (martinGale == martinGales[martinGales.length - 1].toFixed(2) as any) {\n\t\t\t\t\tfinishedGale = true;\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif (result == 'WIN') {\n\t\t\t\t\twinned = true;\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t}\n\t\twhile((!finishedGale && !winned) && !forcedStopMartinGale) await tradeAgain();\n\n\t\tfinishedGale = false;\n\t\twinned = false;\n}"]},"metadata":{},"sourceType":"module"}