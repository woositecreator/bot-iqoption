{"ast":null,"code":"// const WebSocket = require(\"ws\")\nconst Settings = require(\"../settings\");\n\nmodule.exports = function () {\n  const {\n    protocol,\n    host,\n    port,\n    path\n  } = Settings.WEBSOCKET.GATEWAY;\n  this.socket = new WebSocket(protocol + \"://\" + host + \":\" + port + \"/\" + path);\n\n  this.socket.onmessage = message => {\n    //MODS\n    const payload = message.data; //\n\n    message = JSON.parse(payload); //message to payload\n\n    this.emitter.emit(message.name, message);\n  };\n\n  return new Promise((resolve, reject) => {\n    this.socket.onopen = resolve;\n    this.socket.onerror = reject;\n  });\n};","map":{"version":3,"sources":["/home/user/Desktop/project/iqoption/node_modules/iqoptionzzz/lib/WebSocket/init.js"],"names":["Settings","require","module","exports","protocol","host","port","path","WEBSOCKET","GATEWAY","socket","WebSocket","onmessage","message","payload","data","JSON","parse","emitter","emit","name","Promise","resolve","reject","onopen","onerror"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,YAAW;AAC3B,QAAM;AACLC,IAAAA,QADK;AAELC,IAAAA,IAFK;AAGLC,IAAAA,IAHK;AAILC,IAAAA;AAJK,MAKFP,QAAQ,CAACQ,SAAT,CAAmBC,OALvB;AAOA,OAAKC,MAAL,GAAc,IAAIC,SAAJ,CAAcP,QAAQ,GAAG,KAAX,GAAmBC,IAAnB,GAA0B,GAA1B,GAAgCC,IAAhC,GAAuC,GAAvC,GAA6CC,IAA3D,CAAd;;AAEA,OAAKG,MAAL,CAAYE,SAAZ,GAAwBC,OAAO,IAAI;AAClC;AACA,UAAMC,OAAO,GAAGD,OAAO,CAACE,IAAxB,CAFkC,CAGlC;;AACAF,IAAAA,OAAO,GAAGG,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAV,CAJkC,CAIJ;;AAC9B,SAAKI,OAAL,CAAaC,IAAb,CAAkBN,OAAO,CAACO,IAA1B,EAAgCP,OAAhC;AACA,GAND;;AAQA,SAAO,IAAIQ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,SAAKb,MAAL,CAAYc,MAAZ,GAAqBF,OAArB;AACA,SAAKZ,MAAL,CAAYe,OAAZ,GAAsBF,MAAtB;AACA,GAHM,CAAP;AAIA,CAtBD","sourcesContent":["// const WebSocket = require(\"ws\")\r\nconst Settings = require(\"../settings\")\r\n\r\nmodule.exports = function() {\r\n\tconst {\r\n\t\tprotocol,\r\n\t\thost,\r\n\t\tport,\r\n\t\tpath\r\n\t} = Settings.WEBSOCKET.GATEWAY\r\n\r\n\tthis.socket = new WebSocket(protocol + \"://\" + host + \":\" + port + \"/\" + path)\r\n\r\n\tthis.socket.onmessage = message => {\r\n\t\t//MODS\r\n\t\tconst payload = message.data;\r\n\t\t//\r\n\t\tmessage = JSON.parse(payload) //message to payload\r\n\t\tthis.emitter.emit(message.name, message)\r\n\t}\r\n\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tthis.socket.onopen = resolve\r\n\t\tthis.socket.onerror = reject\r\n\t})\r\n}"]},"metadata":{},"sourceType":"script"}