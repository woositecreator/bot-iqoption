{"ast":null,"code":"var getExpiration = require(\"../getexpiration\");\n\nmodule.exports = function () {\n  var _this = this;\n\n  return new Promise(function (resolve, reject) {\n    var _this$options = _this.options,\n        active = _this$options.active,\n        amount = _this$options.amount,\n        action = _this$options.action,\n        duration = _this$options.duration;\n    var expiration = getExpiration(_this.API.serverTimestamp, duration, 10800000);\n    var year = expiration.getFullYear().toString();\n    var month = (expiration.getMonth() + 1).toString().padStart(2, \"0\");\n    var day = expiration.getDate().toString().padStart(2, \"0\");\n    var hours = expiration.getHours().toString().padStart(2, \"0\");\n    var minutes = expiration.getMinutes().toString().padStart(2, \"0\");\n    var formatedDate = year + month + day + hours + minutes;\n    var instrumentId = \"do\" + active + formatedDate + \"PT\" + duration + \"M\" + action[0] + \"SPT\";\n\n    var id = _this.API.WebSocket.send(\"sendMessage\", {\n      name: \"digital-options.place-digital-option\",\n      version: \"1.0\",\n      body: {\n        user_balance_id: _this.API.balance.id,\n        instrument_id: instrumentId,\n        amount: amount\n      }\n    });\n\n    var callback = function callback(message) {\n      if (message.request_id == id) {\n        _this.API.WebSocket.emitter.removeListener(\"digital-option-placed\", callback);\n\n        if (message.status != 2000) return reject(message.msg);\n        return resolve({\n          status: \"open\",\n          id: message.msg.id,\n          win: null,\n          created: _this.API.serverTimestamp,\n          expire: expiration.getTime()\n        });\n      }\n    };\n\n    _this.API.WebSocket.getMessage(\"digital-option-placed\", callback);\n  });\n};","map":{"version":3,"sources":["/home/user/Desktop/project/iqoption/node_modules/iqoptionzzz/lib/api/websocket/buy/actives/digital.js"],"names":["getExpiration","require","module","exports","Promise","resolve","reject","options","active","amount","action","duration","expiration","API","serverTimestamp","year","getFullYear","toString","month","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","formatedDate","instrumentId","id","WebSocket","send","name","version","body","user_balance_id","balance","instrument_id","callback","message","request_id","emitter","removeListener","status","msg","win","created","expire","getTime","getMessage"],"mappings":"AAAA,IAAMA,aAAa,GAAGC,OAAO,CAAC,kBAAD,CAA7B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,YAAW;AAAA;;AAC3B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,wBAKI,KAAI,CAACC,OALT;AAAA,QACCC,MADD,iBACCA,MADD;AAAA,QAECC,MAFD,iBAECA,MAFD;AAAA,QAGCC,MAHD,iBAGCA,MAHD;AAAA,QAICC,QAJD,iBAICA,QAJD;AAOA,QAAMC,UAAU,GAAGZ,aAAa,CAAC,KAAI,CAACa,GAAL,CAASC,eAAV,EAA2BH,QAA3B,EAAqC,QAArC,CAAhC;AAEA,QAAMI,IAAI,GAAGH,UAAU,CAACI,WAAX,GAAyBC,QAAzB,EAAb;AACA,QAAMC,KAAK,GAAG,CAACN,UAAU,CAACO,QAAX,KAAwB,CAAzB,EAA4BF,QAA5B,GAAuCG,QAAvC,CAAgD,CAAhD,EAAmD,GAAnD,CAAd;AACA,QAAMC,GAAG,GAAGT,UAAU,CAACU,OAAX,GAAqBL,QAArB,GAAgCG,QAAhC,CAAyC,CAAzC,EAA4C,GAA5C,CAAZ;AACA,QAAMG,KAAK,GAAGX,UAAU,CAACY,QAAX,GAAsBP,QAAtB,GAAiCG,QAAjC,CAA0C,CAA1C,EAA6C,GAA7C,CAAd;AACA,QAAMK,OAAO,GAAGb,UAAU,CAACc,UAAX,GAAwBT,QAAxB,GAAmCG,QAAnC,CAA4C,CAA5C,EAA+C,GAA/C,CAAhB;AAEA,QAAMO,YAAY,GAAGZ,IAAI,GAAGG,KAAP,GAAeG,GAAf,GAAqBE,KAArB,GAA6BE,OAAlD;AAEA,QAAMG,YAAY,GAAG,OAAOpB,MAAP,GAAgBmB,YAAhB,GAA+B,IAA/B,GAAsChB,QAAtC,GAAiD,GAAjD,GAAuDD,MAAM,CAAC,CAAD,CAA7D,GAAmE,KAAxF;;AAEA,QAAMmB,EAAE,GAAG,KAAI,CAAChB,GAAL,CAASiB,SAAT,CAAmBC,IAAnB,CAAwB,aAAxB,EAAuC;AACjDC,MAAAA,IAAI,EAAE,sCAD2C;AAEjDC,MAAAA,OAAO,EAAE,KAFwC;AAGjDC,MAAAA,IAAI,EAAE;AACLC,QAAAA,eAAe,EAAE,KAAI,CAACtB,GAAL,CAASuB,OAAT,CAAiBP,EAD7B;AAELQ,QAAAA,aAAa,EAAET,YAFV;AAGLnB,QAAAA,MAAM,EAANA;AAHK;AAH2C,KAAvC,CAAX;;AAUA,QAAM6B,QAAQ,GAAG,SAAXA,QAAW,CAAAC,OAAO,EAAI;AAC3B,UAAIA,OAAO,CAACC,UAAR,IAAsBX,EAA1B,EAA8B;AAC7B,QAAA,KAAI,CAAChB,GAAL,CAASiB,SAAT,CAAmBW,OAAnB,CAA2BC,cAA3B,CAA0C,uBAA1C,EAAmEJ,QAAnE;;AACA,YAAIC,OAAO,CAACI,MAAR,IAAkB,IAAtB,EAA4B,OAAOrC,MAAM,CAACiC,OAAO,CAACK,GAAT,CAAb;AAC5B,eAAOvC,OAAO,CAAC;AACdsC,UAAAA,MAAM,EAAE,MADM;AAEdd,UAAAA,EAAE,EAAEU,OAAO,CAACK,GAAR,CAAYf,EAFF;AAGdgB,UAAAA,GAAG,EAAE,IAHS;AAIdC,UAAAA,OAAO,EAAE,KAAI,CAACjC,GAAL,CAASC,eAJJ;AAKdiC,UAAAA,MAAM,EAAEnC,UAAU,CAACoC,OAAX;AALM,SAAD,CAAd;AAOA;AACD,KAZD;;AAcA,IAAA,KAAI,CAACnC,GAAL,CAASiB,SAAT,CAAmBmB,UAAnB,CAA8B,uBAA9B,EAAuDX,QAAvD;AACA,GA7CM,CAAP;AA8CA,CA/CD","sourcesContent":["const getExpiration = require(\"../getexpiration\")\r\n\r\nmodule.exports = function() {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst {\r\n\t\t\tactive,\r\n\t\t\tamount,\r\n\t\t\taction,\r\n\t\t\tduration\r\n\t\t} = this.options\r\n\r\n\t\tconst expiration = getExpiration(this.API.serverTimestamp, duration, 10800000)\r\n\r\n\t\tconst year = expiration.getFullYear().toString()\r\n\t\tconst month = (expiration.getMonth() + 1).toString().padStart(2, \"0\")\r\n\t\tconst day = expiration.getDate().toString().padStart(2, \"0\")\r\n\t\tconst hours = expiration.getHours().toString().padStart(2, \"0\")\r\n\t\tconst minutes = expiration.getMinutes().toString().padStart(2, \"0\")\r\n\r\n\t\tconst formatedDate = year + month + day + hours + minutes\r\n\r\n\t\tconst instrumentId = \"do\" + active + formatedDate + \"PT\" + duration + \"M\" + action[0] + \"SPT\"\r\n\r\n\t\tconst id = this.API.WebSocket.send(\"sendMessage\", {\r\n\t\t\tname: \"digital-options.place-digital-option\",\r\n\t\t\tversion: \"1.0\",\r\n\t\t\tbody: {\r\n\t\t\t\tuser_balance_id: this.API.balance.id,\r\n\t\t\t\tinstrument_id: instrumentId,\r\n\t\t\t\tamount\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tconst callback = message => {\r\n\t\t\tif (message.request_id == id) {\r\n\t\t\t\tthis.API.WebSocket.emitter.removeListener(\"digital-option-placed\", callback)\r\n\t\t\t\tif (message.status != 2000) return reject(message.msg)\r\n\t\t\t\treturn resolve({\r\n\t\t\t\t\tstatus: \"open\",\r\n\t\t\t\t\tid: message.msg.id,\r\n\t\t\t\t\twin: null,\r\n\t\t\t\t\tcreated: this.API.serverTimestamp,\r\n\t\t\t\t\texpire: expiration.getTime()\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.API.WebSocket.getMessage(\"digital-option-placed\", callback)\r\n\t})\r\n}"]},"metadata":{},"sourceType":"script"}