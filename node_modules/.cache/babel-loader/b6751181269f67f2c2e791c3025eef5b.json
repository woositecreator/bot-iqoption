{"ast":null,"code":"const getExpiration = require(\"../getexpiration\");\n\nmodule.exports = function () {\n  return new Promise((resolve, reject) => {\n    const {\n      active,\n      amount,\n      action,\n      duration\n    } = this.options;\n    const expiration = getExpiration(this.API.serverTimestamp, duration, 0);\n    const id = this.API.WebSocket.send(\"sendMessage\", {\n      name: \"binary-options.open-option\",\n      version: \"1.0\",\n      body: {\n        user_balance_id: this.API.balance.id,\n        active_id: this.API.actives[active],\n        option_type_id: duration > 5 ? 1 : 3,\n        direction: action.toLowerCase(),\n        expired: expiration.getTime() / 1000,\n        refund_value: 0,\n        price: Number(amount),\n        value: 0,\n        profit_percent: 0\n      }\n    });\n\n    const callback = message => {\n      if (message.request_id == id) {\n        this.API.WebSocket.emitter.removeListener(\"option\", callback);\n        if (message.status != 0) return reject(message.msg);\n        return resolve({\n          status: \"open\",\n          win: null,\n          id: message.msg.id,\n          created: this.API.serverTimestamp,\n          expire: expiration.getTime()\n        });\n      }\n    };\n\n    this.API.WebSocket.getMessage(\"option\", callback);\n  });\n};","map":{"version":3,"sources":["/home/user/Desktop/project/iqoption/node_modules/iqoptionzzz/lib/api/websocket/buy/actives/binary.js"],"names":["getExpiration","require","module","exports","Promise","resolve","reject","active","amount","action","duration","options","expiration","API","serverTimestamp","id","WebSocket","send","name","version","body","user_balance_id","balance","active_id","actives","option_type_id","direction","toLowerCase","expired","getTime","refund_value","price","Number","value","profit_percent","callback","message","request_id","emitter","removeListener","status","msg","win","created","expire","getMessage"],"mappings":"AAAA,MAAMA,aAAa,GAAGC,OAAO,CAAC,kBAAD,CAA7B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,YAAW;AAC3B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,UAAM;AACLC,MAAAA,MADK;AAELC,MAAAA,MAFK;AAGLC,MAAAA,MAHK;AAILC,MAAAA;AAJK,QAKF,KAAKC,OALT;AAOA,UAAMC,UAAU,GAAGZ,aAAa,CAAC,KAAKa,GAAL,CAASC,eAAV,EAA2BJ,QAA3B,EAAqC,CAArC,CAAhC;AAEA,UAAMK,EAAE,GAAG,KAAKF,GAAL,CAASG,SAAT,CAAmBC,IAAnB,CAAwB,aAAxB,EAAuC;AACjDC,MAAAA,IAAI,EAAE,4BAD2C;AAEjDC,MAAAA,OAAO,EAAE,KAFwC;AAGjDC,MAAAA,IAAI,EAAE;AACLC,QAAAA,eAAe,EAAE,KAAKR,GAAL,CAASS,OAAT,CAAiBP,EAD7B;AAELQ,QAAAA,SAAS,EAAE,KAAKV,GAAL,CAASW,OAAT,CAAiBjB,MAAjB,CAFN;AAGLkB,QAAAA,cAAc,EAAEf,QAAQ,GAAG,CAAX,GAAe,CAAf,GAAmB,CAH9B;AAILgB,QAAAA,SAAS,EAAEjB,MAAM,CAACkB,WAAP,EAJN;AAKLC,QAAAA,OAAO,EAAEhB,UAAU,CAACiB,OAAX,KAAuB,IAL3B;AAMLC,QAAAA,YAAY,EAAE,CANT;AAOLC,QAAAA,KAAK,EAAEC,MAAM,CAACxB,MAAD,CAPR;AAQLyB,QAAAA,KAAK,EAAE,CARF;AASLC,QAAAA,cAAc,EAAE;AATX;AAH2C,KAAvC,CAAX;;AAgBA,UAAMC,QAAQ,GAAGC,OAAO,IAAI;AAC3B,UAAIA,OAAO,CAACC,UAAR,IAAsBtB,EAA1B,EAA8B;AAC7B,aAAKF,GAAL,CAASG,SAAT,CAAmBsB,OAAnB,CAA2BC,cAA3B,CAA0C,QAA1C,EAAoDJ,QAApD;AACA,YAAIC,OAAO,CAACI,MAAR,IAAkB,CAAtB,EAAyB,OAAOlC,MAAM,CAAC8B,OAAO,CAACK,GAAT,CAAb;AACzB,eAAOpC,OAAO,CAAC;AACdmC,UAAAA,MAAM,EAAE,MADM;AAEdE,UAAAA,GAAG,EAAE,IAFS;AAGd3B,UAAAA,EAAE,EAAEqB,OAAO,CAACK,GAAR,CAAY1B,EAHF;AAId4B,UAAAA,OAAO,EAAE,KAAK9B,GAAL,CAASC,eAJJ;AAKd8B,UAAAA,MAAM,EAAEhC,UAAU,CAACiB,OAAX;AALM,SAAD,CAAd;AAOA;AACD,KAZD;;AAcA,SAAKhB,GAAL,CAASG,SAAT,CAAmB6B,UAAnB,CAA8B,QAA9B,EAAwCV,QAAxC;AACA,GAzCM,CAAP;AA0CA,CA3CD","sourcesContent":["const getExpiration = require(\"../getexpiration\")\r\n\r\nmodule.exports = function() {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst {\r\n\t\t\tactive,\r\n\t\t\tamount,\r\n\t\t\taction,\r\n\t\t\tduration\r\n\t\t} = this.options\r\n\r\n\t\tconst expiration = getExpiration(this.API.serverTimestamp, duration, 0)\r\n\r\n\t\tconst id = this.API.WebSocket.send(\"sendMessage\", {\r\n\t\t\tname: \"binary-options.open-option\",\r\n\t\t\tversion: \"1.0\",\r\n\t\t\tbody: {\r\n\t\t\t\tuser_balance_id: this.API.balance.id,\r\n\t\t\t\tactive_id: this.API.actives[active],\r\n\t\t\t\toption_type_id: duration > 5 ? 1 : 3,\r\n\t\t\t\tdirection: action.toLowerCase(),\r\n\t\t\t\texpired: expiration.getTime() / 1000,\r\n\t\t\t\trefund_value: 0,\r\n\t\t\t\tprice: Number(amount),\r\n\t\t\t\tvalue: 0,\r\n\t\t\t\tprofit_percent: 0\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tconst callback = message => {\r\n\t\t\tif (message.request_id == id) {\r\n\t\t\t\tthis.API.WebSocket.emitter.removeListener(\"option\", callback)\r\n\t\t\t\tif (message.status != 0) return reject(message.msg)\r\n\t\t\t\treturn resolve({\r\n\t\t\t\t\tstatus: \"open\",\r\n\t\t\t\t\twin: null,\r\n\t\t\t\t\tid: message.msg.id,\r\n\t\t\t\t\tcreated: this.API.serverTimestamp,\r\n\t\t\t\t\texpire: expiration.getTime()\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.API.WebSocket.getMessage(\"option\", callback)\r\n\t})\r\n}"]},"metadata":{},"sourceType":"script"}