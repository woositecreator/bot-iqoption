{"ast":null,"code":"const {\n  Binary,\n  Digital\n} = require(\"./actives\");\n\nfunction Buy(API, options) {\n  this.API = API;\n  this.options = options;\n  return new Promise(async (resolve, reject) => {\n    if (!(this.options.active in this.API.actives)) return reject(\"(BUY) Ativo inválido.\");else if (Number.isNaN(parseInt(this.options.amount))) return reject(\"(BUY) Valor inválido.\");else if ([\"CALL\", \"PUT\"].indexOf(this.options.action) == -1) return reject(\"(BUY) Ação inválida.\");else if ([\"BINARY\", \"DIGITAL\", \"FOREX\"].indexOf(this.options.type) == -1) return reject(\"(BUY) Tipo inválido.\");\n\n    try {\n      if (this.options.type == \"BINARY\") {\n        this.quote = await Binary.call(this);\n      } else if (this.options.type == \"DIGITAL\") {\n        this.quote = await Digital.call(this);\n      }\n    } catch (error) {\n      return reject(`(BUY) ${error.message}`);\n    }\n\n    return resolve(this);\n  });\n}\n\nBuy.prototype.close = require(\"./close\");\nmodule.exports = Buy;","map":{"version":3,"sources":["/home/user/Desktop/project/iqoption/node_modules/iqoptionzzz/lib/api/websocket/buy/buy.js"],"names":["Binary","Digital","require","Buy","API","options","Promise","resolve","reject","active","actives","Number","isNaN","parseInt","amount","indexOf","action","type","quote","call","error","message","prototype","close","module","exports"],"mappings":"AAAA,MAAM;AACLA,EAAAA,MADK;AAELC,EAAAA;AAFK,IAGFC,OAAO,CAAC,WAAD,CAHX;;AAKA,SAASC,GAAT,CAAaC,GAAb,EAAkBC,OAAlB,EAA2B;AAC1B,OAAKD,GAAL,GAAWA,GAAX;AACA,OAAKC,OAAL,GAAeA,OAAf;AAEA,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC7C,QAAI,EAAE,KAAKH,OAAL,CAAaI,MAAb,IAAuB,KAAKL,GAAL,CAASM,OAAlC,CAAJ,EACC,OAAOF,MAAM,CAAC,uBAAD,CAAb,CADD,KAEK,IAAIG,MAAM,CAACC,KAAP,CAAaC,QAAQ,CAAC,KAAKR,OAAL,CAAaS,MAAd,CAArB,CAAJ,EACJ,OAAON,MAAM,CAAC,uBAAD,CAAb,CADI,KAEA,IAAI,CAAC,MAAD,EAAS,KAAT,EAAgBO,OAAhB,CAAwB,KAAKV,OAAL,CAAaW,MAArC,KAAgD,CAAC,CAArD,EACJ,OAAOR,MAAM,CAAC,sBAAD,CAAb,CADI,KAEA,IAAI,CAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EAA+BO,OAA/B,CAAuC,KAAKV,OAAL,CAAaY,IAApD,KAA6D,CAAC,CAAlE,EACJ,OAAOT,MAAM,CAAC,sBAAD,CAAb;;AAED,QAAI;AACH,UAAI,KAAKH,OAAL,CAAaY,IAAb,IAAqB,QAAzB,EAAmC;AAClC,aAAKC,KAAL,GAAa,MAAMlB,MAAM,CAACmB,IAAP,CAAY,IAAZ,CAAnB;AACA,OAFD,MAEO,IAAI,KAAKd,OAAL,CAAaY,IAAb,IAAqB,SAAzB,EAAoC;AAC1C,aAAKC,KAAL,GAAa,MAAMjB,OAAO,CAACkB,IAAR,CAAa,IAAb,CAAnB;AACA;AACD,KAND,CAME,OAAMC,KAAN,EAAa;AACd,aAAOZ,MAAM,CAAE,SAAQY,KAAK,CAACC,OAAQ,EAAxB,CAAb;AACA;;AAED,WAAOd,OAAO,CAAC,IAAD,CAAd;AACA,GArBM,CAAP;AAsBA;;AAEDJ,GAAG,CAACmB,SAAJ,CAAcC,KAAd,GAAsBrB,OAAO,CAAC,SAAD,CAA7B;AAEAsB,MAAM,CAACC,OAAP,GAAiBtB,GAAjB","sourcesContent":["const {\r\n\tBinary,\r\n\tDigital\r\n} = require(\"./actives\")\r\n\r\nfunction Buy(API, options) {\r\n\tthis.API = API\r\n\tthis.options = options\r\n\r\n\treturn new Promise(async (resolve, reject) => {\r\n\t\tif (!(this.options.active in this.API.actives))\r\n\t\t\treturn reject(\"(BUY) Ativo inválido.\")\r\n\t\telse if (Number.isNaN(parseInt(this.options.amount)))\r\n\t\t\treturn reject(\"(BUY) Valor inválido.\")\r\n\t\telse if ([\"CALL\", \"PUT\"].indexOf(this.options.action) == -1)\r\n\t\t\treturn reject(\"(BUY) Ação inválida.\")\r\n\t\telse if ([\"BINARY\", \"DIGITAL\", \"FOREX\"].indexOf(this.options.type) == -1)\r\n\t\t\treturn reject(\"(BUY) Tipo inválido.\")\r\n\r\n\t\ttry {\r\n\t\t\tif (this.options.type == \"BINARY\") {\r\n\t\t\t\tthis.quote = await Binary.call(this)\r\n\t\t\t} else if (this.options.type == \"DIGITAL\") {\r\n\t\t\t\tthis.quote = await Digital.call(this)\r\n\t\t\t}\r\n\t\t} catch(error) {\r\n\t\t\treturn reject(`(BUY) ${error.message}`)\r\n\t\t}\r\n\r\n\t\treturn resolve(this)\r\n\t})\r\n}\r\n\r\nBuy.prototype.close = require(\"./close\")\r\n\r\nmodule.exports = Buy"]},"metadata":{},"sourceType":"script"}